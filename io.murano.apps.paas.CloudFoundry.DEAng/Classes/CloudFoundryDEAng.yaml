Namespaces:
  =: io.murano.apps.paas
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  apps: io.murano.apps


Name: CloudFoundry.DEAng

Extends: std:Application

Properties:
  name:
    Contract: $.string().notNull()

  instance:
    Contract: $.class(res:Instance).notNull()

  cf_controller:
    Contract: $.class(CloudFoundry).notNull()

Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: !yaql "not bool($.getAttr(deployed))"
        Then:
          - $this.find(std:Environment).reporter.report($this, 'Creating VM for DEA ')
          - $securityGroupIngress:
              - ToPort: 80
                FromPort: 80
                IpProtocol: tcp
                External: True
              - ToPort: 65535
                FromPort: 1024
                IpProtocol: tcp
                External: True
              - ToPort: 443
                FromPort: 443
                IpProtocol: tcp
                External: True
          - $.environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          - $.instance.deploy()
          - $resources: new(sys:Resources)
          #All steps below actually follow the process in ./scripts/install.sh
          # Just add more interactivity to provide status
          # Install Ruby part
          - $template: $resources.yaml('InstallRuby.template')
          - $this.find(std:Environment).reporter.report($this, '[1/3] Installing Ruby...')
          - $.instance.agent.call($template, $resources)


          #Install CF release
          - $template: $resources.yaml('InstallWarden.template')
          - $this.find(std:Environment).reporter.report($this, '[2/4]Installing Warden ...')
          - $.instance.agent.call($template, $resources)

          #Install CF release
          - $template: $resources.yaml('InstallDEA.template')
          - $this.find(std:Environment).reporter.report($this, '[3/4]Installing DEA ...')
          - $.instance.agent.call($template, $resources)

          - $this.find(std:Environment).reporter.report($this, 'Waiting for Controller')
          - $.cf_controller.deploy()

          #Install CF CLI
          - $template: $resources.yaml('StartDEA.template').bind(dict(
                NATS_ip => $.cf_controller.instance.ipAdresses[0]
              ))
          - $this.find(std:Environment).reporter.report($this, '[4/4]Configure and Start...')
          - $.instance.agent.call($template, $resources)
          - $this.find(std:Environment).reporter.report($this, 'DEA is started')
          - $.setAttr(deployed, True)
