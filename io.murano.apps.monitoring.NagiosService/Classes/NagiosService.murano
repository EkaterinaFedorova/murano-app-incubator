Namespaces:
  =: io.murano.apps.monitoring
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  apps: io.murano.apps


Name: NagiosService

Extends: MonitoringService

Properties:
  instance:
    Contract: $.class(res:Instance).notNull()

Methods:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  deploy:
    Body:
     - If: not $.getAttr(deployed, false)
       Then:
          - $.environment.reporter.report($this, '[Nagios] Creating VM for Nagios')
          - $securityGroupIngress:
              - ToPort: 80
                FromPort: 80
                IpProtocol: 'tcp'
                External: true
              - ToPort: 5666
                FromPort: 5666
                IpProtocol: 'tcp'
                External: false
          - $.environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          - $.instance.deploy()
          - $.environment.reporter.report($this, '[Nagios] Installing Nagios')
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('DeployNagios.template')
          - $.instance.agent.call($template, $resources)
          - $.environment.reporter.report($this, '[Nagios] Setup Nagios Service')

          - $template: $resources.yaml('SetupNagios.template').bind(dict(
                ui_password => 'swordfish'
              ))
          - $.instance.agent.call($template, $resources)
          - If: $.instance.assignFloatingIp
            Then:
              - $ep: $.instance.floatingIpAddress
            Else:
              - $ep: $.instance.ipAddresses[0]
          - $.environment.reporter.report($this, '[Nagios] Ready at http://' + $ep + '/nagios')
          - $.setAttr(deployed, true)


  setupCheck:
    Arguments:
      instance:
        Contract: $.class(res:Instance).notNull()
      action_object:
        Contract: $.class(std:Application).notNull()
      action_name:
        Contract: $.string().notNull()
    Body:
        - $.environment.reporter.report($this, '[Nagios] Add service to monitoring')
        - $alarmAction: format('{0}/v1/environments/{1}/actions/{2}_{3}',
                    'http://198.11.196.51:9090',
                    $.environment.id(),
                    $action_object.id(),
                    $action_name
                  )
        - $.setupAlarmEntry( action_name => $action_name,
                           alarm_action => $alarmAction)
        - $resources: new(sys:Resources)
        - $template: $resources.yaml('SetupService.template').bind(dict(
            ip => $instance.ipAddresses[0],
            alarm_url => $alarmAction,
            host_name => $instance.name
            ))
        - $.instance.agent.call($template, $resources)

  setupCheckForIP:
    Arguments:
      ip:
        Contract: $.string().notNull()
      action_object:
        Contract: $.class(std:Application).notNull()
      action_name:
        Contract: $.string().notNull()
    Body:
        - $.environment.reporter.report($this, '[Nagios] Add service to monitoring')
        - $alarmAction: format('{0}/v1/environments/{1}/actions/{2}_{3}',
                    'http://198.11.196.51:9090',
                    $.environment.id(),
                    $action_object.id(),
                    $action_name
                  )
        - $.setupAlarmEntry( action_name => $action_name,
                                   alarm_action => $alarmAction)
        - $resources: new(sys:Resources)
        - $template: $resources.yaml('SetupService.template').bind(dict(
            ip => $ip,
            alarm_url => $alarmAction,
            host_name => $instance.name
            ))
        - $.instance.agent.call($template, $resources)

  setupProbe:
    Arguments:
      type:
        Contract: $.string().notNull()
      instance:
        Contract: $.class(res:Instance).notNull()
      action_object:
        Contract: $.class(std:Application).notNull()
      action_name:
        Contract: $.string().notNull()
      port:
        Contract: $.int()
        Default: 8080
      url:
        Contract: $.string()
        Default: '/'
    Body:
        - $.environment.reporter.report($this, '[Nagios] Add service to monitoring')
        - $alarmAction: format('{0}/v1/environments/{1}/actions/{2}_{3}',
                    'http://198.11.196.51:9090',
                    $.environment.id(),
                    $action_object.id(),
                    $action_name
                  )
        - $.setupAlarmEntry( action_name => $action_name,
                                   alarm_action => $alarmAction)
        - $resources: new(sys:Resources)
        - If: $type = 'HTTP'
          Then:
            - $template: $resources.yaml('SetupHTTPService.template').bind(dict(
                ip => $instance.ipAddresses[0],
                alarm_url => $alarmAction,
                host_name => $instance.name,
                port => $port,
                url => $url,
                action_name => $action_name
                ))
            - $.instance.agent.call($template, $resources)

  setupProbeForIP:
    Arguments:
      type:
        Contract: $.string().notNull()
      ip:
        Contract: $.string().notNull()
      hostname:
        Contract: $.string().notNull()
      action_object:
        Contract: $.class(std:Application).notNull()
      action_name:
        Contract: $.string().notNull()
      port:
        Contract: $.int()
        Default: 8080
      url:
        Contract: $.string()
        Default: '/'
    Body:
        - $.environment.reporter.report($this, '[Nagios] Add service to monitoring')
        - $alarmAction: format('{0}/v1/environments/{1}/actions/{2}_{3}',
                    'http://198.11.196.51:9090',
                    $.environment.id(),
                    $action_object.id(),
                    $action_name
                  )
        - $.setupAlarmEntry( action_name => $action_name,
                                   alarm_action => $alarmAction)
        - $resources: new(sys:Resources)
        - If: $type = 'HTTP'
          Then:
            - $template: $resources.yaml('SetupHTTPService.template').bind(dict(
                ip => $ip,
                alarm_url => $alarmAction,
                host_name => $hostname,
                port => $port,
                url => $url,
                action_name => $action_name
                ))
            - $.instance.agent.call($template, $resources)

  installNPREService:
    Arguments:
      server_ip:
        Contract: $.string().notNull()
      instance:
        Contract: $.class(res:Instance).notNull()
    Body:
      - $.environment.reporter.report($this, '[Nagios] Add NPRE service to {0}'.format($instance.name))
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('SetupNPREService.template').bind(dict(
          server_ip => $server_ip))
      - $instance.agent.call($template, $resources)

  setupAlarmEntry:
    Arguments:
      action_name:
        Contract: $.string().notNull()
      alarm_action:
        Contract: $.string().notNull()
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('SetupAlarm.template').bind(dict(
           action_name => $action_name,
           alarm_action => $alarm_action
           ))
      - $.instance.agent.call($template, $resources)

  setupCPULoadCheck:
    Arguments:
      instance:
        Contract: $.class(res:Instance).notNull()
      action_object:
        Contract: $.class(std:Application).notNull()
      action_name:
        Contract: $.string().notNull()
      warning_levels:
        Contract: $.string().notNull()
      critical_levels:
        Contract: $.string().notNull()
    Body:
        - $.environment.reporter.report($this, '[Nagios] Add service to monitoring')
        - $alarmAction: format('{0}/v1/environments/{1}/actions/{2}_{3}',
                    'http://198.11.196.51:9090',
                    $.environment.id(),
                    $action_object.id(),
                    $action_name
                  )
        - $.installNPREService(server_ip => $.instance.ipAddresses[0],
                               instance => $instance)
        - $.setupAlarmEntry( action_name => $action_name,
                                   alarm_action => $alarmAction)
        - $resources: new(sys:Resources)
        - $template: $resources.yaml('SetupCPULoadAlarm.template').bind(dict(
                        ip => $instance.ipAddresses[0],
                        host => $instance.name,
                        warningLevels => $warning_levels,
                        criticalLevels => $critical_levels,
                        action_name => $action_name
                        ))
        - $.instance.agent.call($template, $resources)