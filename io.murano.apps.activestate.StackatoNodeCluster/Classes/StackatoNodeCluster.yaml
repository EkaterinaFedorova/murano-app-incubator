Namespaces:
  =: io.murano.apps.activestate
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  apps: io.murano.apps


Name: StackatoNodeCluster

Extends: std:Application

Properties:
  name:
    Contract: $.string().notNull()

  instances:
    Contract:
      - $.class(res:Instance).notNull()

  initialCount:
    Contract: $.int().notNull()
    Default: 1

  maxCount:
    Contract: $.int().notNull()
    Default: 5

  currentCount:
    Contract: $.int()
    Usage: InOut
  host:
    Contract: $.string()
    Usage: Out


Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $.environment.reporter.report($this, 'Creating a VM ')
          - $securityGroupIngress:
              - ToPort: 22
                FromPort: 22
                IpProtocol: tcp
                External: True
          - $.environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          - $.currentCount: $.initialCount
          - $.instances.take($.currentCount).pselect($.deploy())
          - $resources: new(sys:Resources)
          - $.environment.reporter.report($this, 'Stackato VM is created')
          - $.setAttr(deployed, true)

  setupNode:
    Arguments:
      role:
        Contract: $.string().notNull()
      core_ip:
        Contract: $.string().notNull()
      apiURL:
        Contract: $.string().notNull()
      instance:
        Contract: $.class(res:Instance).notNull()
    Body:
      - $.environment.reporter.report($this, 'Configuring Stackato role:' + $role)
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('InstallStackato.template').bind(dict(
          role => $role,
          core_ip => $core_ip,
          apiURL => $apiURL
          ))
      - $instance.agent.call($template, $resources)

  setupNodes:
    Arguments:
      role:
        Contract: $.string().notNull()
      core_ip:
        Contract: $.string().notNull()
      apiURL:
        Contract: $.string().notNull()
    Body:
      $.instances.take($.currentCount).pselect($this.setupNode(
        role => $role,
        core_ip => $core_ip,
        apiURL => $apiURL,
        instance => $
        ))
