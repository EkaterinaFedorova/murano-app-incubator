Namespaces:
  =: io.murano.apps.mongodb
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  apps: io.murano.apps


Name: MongoReplicationSet

Extends: std:Application

Properties:
  name:
    Contract: $.string().notNull()

  repset:
    Contract: $.string().notNull()

  instances:
    Contract:
    - $.class(MongoInstance)

Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $log: $this.find(std:Environment).reporter
          - $log.report($this,'Creating VMs')
          - $.instances.pselect($.deploy())
          - $log.report($this,'Initializing Replication Set')
          - $resources: new(sys:Resources)

          - $ips: (' '.join($this.instances.select($.hostname)))

          - $log.report($this, 'Instances:{0}'.format($ips))

          - $.instances.pselect($.updateHosts($ips))

          - $template: $resources.yaml('SetupRS.template').bind(dict(
                  ips => $ips
                ))
          - $.instances[0].instance.agent.call($template, $resources)

          - $log.report($this,'Installation is complete')
          - $.setAttr(deployed, True)
