Namespaces:
  =: io.murano.apps.activestate
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  apps: io.murano.apps


Name: StackatoNode

Extends: std:Application

Properties:
  name:
    Contract: $.string().notNull()

  node:
    Contract: $.class('io.murano.apps.activestate.StackatoNode').notNull()

  core:
    Contract: $.class('io.murano.apps.activestate.StackatoCore').notNull()

  host:
    Contract: $.string()
    Usage: Out

  monitoring:
    Contract: $.class('io.murano.apps.monitoring.MonitoringService')

Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $.environment.reporter.report($this, 'Creating a VM ')
          - $.node.deploy()
          - $.core.deploy()

          - $securityGroupIngress:
              - ToPort: 22
                FromPort: 22
                IpProtocol: tcp
                External: True
          - $.environment.securityGroupManager.addGroupIngress($securityGroupIngress)

          - $.node.setupNode(
             role => 'data-services',
             core_ip => $.core.host,
             apiURL => $.core.apiURL
             )
          - $resources: new(sys:Resources)

          - $.environment.reporter.report($this, 'Data Service node is created')
          - $.setupMonitoring()
          - $.host: $.node.instance.ipAddresses[0]
          - $.setAttr(deployed, true)

  setupMonitoring:
    Body:
      - If: $.monitoring != null
        Then:
          - $.environment.reporter.report($this, 'Adding Core node to the monitoring system')
          - $.monitoring.deploy()
          - $.monitoring.setupCheck(instance => $.node.instance,
                                    action_object => $this,
                                    action_name => 'none')