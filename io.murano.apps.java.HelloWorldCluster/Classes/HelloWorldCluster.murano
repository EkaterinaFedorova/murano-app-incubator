Namespaces:
  =: io.murano.apps.java
  std: io.murano
  sys: io.murano.system
  apps: io.murano.apps
  res: io.murano.resources
  tc: io.murano.apps.apache

Name: HelloWorldCluster

Extends: std:Application

Properties:
  name:
    Contract: $.string().notNull()
  tomcat:
    Contract: $.class(tc:TomcatServletContainer).notNull()
  repository:
    Contract: $.string().notNull()
  dir:
    Contract: $.string().notNull()
  database:
    Contract: $.class(apps:PostgreSql).notNull()
  dbName:
    Contract: $.string().notNull()
  dbUser:
    Contract: $.string().notNull()
  dbPassword:
    Contract: $.string().notNull()
  monitoring:
    Contract: $.class('io.murano.apps.monitoring.MonitoringService').notNull()

Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $this.find(std:Environment).reporter.report($this, '[HelloWorld]Ensuring Tomcat is deployed.')
          - $.tomcat.deploy()


          - $this.find(std:Environment).reporter.report($this, '[HelloWorld]Setting up the application on Tomcat.')
          #- $.tomcat.deployApp($template, $resources)
          # Configure access to PostgreSql
          - $this.find(std:Environment).reporter.report($this, '[HelloWorld]Ensuring Database is deployed.')
          - $.database.createDatabase($.dbName, $.dbUser, $.dbPassword)
          - $.tomcat.deployApp($this)
          - $this.find(std:Environment).reporter.report($this, '[HelloWorld]Application is installed')
          - If: $.tomcat.clustered
            Then:
              - $.monitoring.deploy()
              - $.setupClusterMonitoring()
              - $.tomcat.enableLb()
              #- $.monitoring.setupProbeForIP(type => 'HTTP', ip => $.tomcat.public_ip, hostname => 'lb_application_endpoint',
              #                                   action_object => $this, action_name => 'endpointFailureAction',
              #                                   port => 80, url => '/' + $.dir)
              - $ep: $.tomcat.public_ip + '/' + $.dir
            Else:
             - $.monitoring.deploy()
             - $.monitoring.setupProbe(type => 'HTTP', instance => $.tomcat.instance,
                                                 action_object => $this, action_name => 'restartTomcat',
                                                 port => 8080, url => '/' + $.dir)
             - $ep: $.tomcat.public_ip + ':8080/' + $.dir
          - $this.find(std:Environment).reporter.report($this, '[HelloWorld]Running at http://' + $ep)
          - $.setAttr(deployed, true)

  deployApp:
    Arguments:
      instance:
        Contract: $.class(res:Instance).notNull()

    Body:
        - $.environment.reporter.report($this, '[HelloWorld] Installing App to Tomcat')
        - $resources: new(sys:Resources)
        # Deploy app over Tomcat
        - $template: $resources.yaml('DeployTomcatApp.template').bind(dict(
              repository => $.repository,
              dir => $.dir
            ))
        - $instance.agent.call($template, $resources)
        - $.environment.reporter.report($this, '[HelloWorld]Configure access to PostgreSql.')
        - $template: $resources.yaml('ConfigureAccessToPostgreSql.template').bind(dict(
             database => $.dbName,
             username => $.dbUser,
             password => $.dbPassword,
             host => $.database.instance.ipAddresses[0],
             dir => $.dir
            ))
        - $instance.agent.call($template, $resources)

  setupClusterMonitoring:
    Body:
      - $.tomcat.instances.take($.tomcat.current_count).select($this.monitoring.setupProbe(type => 'HTTP',
                                                              instance => $, action_object => $this,
                                                              action_name => 'healCluster',
                                                              port => 8080, url => '/' + $this.dir))
      - $.tomcat.instances.take($.tomcat.current_count).select($this.monitoring.setupCPULoadCheck(instance => $,
                                                               action_object => $this,
                                                               action_name => 'scaleUP',
                                                               warning_levels =>'2.1,3.0,4.0',
                                                               critical_levels => '4.0,5.0,6.0'))

  healCluster:
    Usage: Action
    Arguments:
      host:
        Contract: $.string()
        Default: 'ui defined'
    Body:
      - $.environment.reporter.report($this, 'Got heal action call for {0}'.format($host))
      - If: $.tomcat.clustered
        Then:
          - $deployed_instances: $.tomcat.instances.where(len($.ipAddresses) >0)
          - $failed_instances: $deployed_instances.where($.ipAddresses[0] = $host)
          - If: len($failed_instances) >0
            Then:
              - $inst: $failed_instances[0]
              - $.environment.reporter.report($this, 'Disable host {0} in LB'.format($inst.name))
              - $.environment.reporter.report($this, 'Trying to restart the service')
              - $.tomcat.restartService(instance => $inst)
              #- $.tomcat.addToLB(instance_name => $inst.name, port => $.tomcat.port, adminState => false)
          #- $.environment.reporter.report($this, 'Adding a new instance to backup a failed node')
          #- $instance: $.tomcat.addInstance($this)
          #- $.monitoring.setupProbe(type => 'HTTP', instance => $instance, action_object => $this, action_name => 'healCluster',
          #                             port => 8080, url => '/' + $this.dir)


  endpointFailureAction:
    Usage: Action
    Arguments:
      host:
        Contract: $.string()
        Default: 'ui defined'
    Body:
      - $.environment.reporter.report($this, 'Got endpointFailureAction action for {0}'.format($host))
      - $.environment.reporter.report($this, 'Here we should have DR logic to switchover to another deployment.')

  restartTomcat:
    Arguments:
        host:
          Contract: $.string()
          Default: 'ui defined'
    Usage: Action
    Body:
      - $.environment.reporter.report($this, 'Got restart action for {0}'.format($host))
      - If: not $.tomcat.clustered
        Then:
          - $.tomcat.restartService()

  scaleUP:
    Usage: Action
    Arguments:
      host:
        Contract: $.string()
        Default: 'UI selected'
    Body:
      - $.environment.reporter.report($this, 'Performing scaleUP action')
      - $instance: $.tomcat.addInstance($this)