Namespaces:
  =: io.murano.apps.docker.Kubernetes
  docker: io.murano.apps.docker
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  traffic: io.murano.traffic

# TODO: 1. we need to check status of POD by using /opt/bin/kubectl get -o json pod
# It will provide a json with pod state, and host which we need to expose to end user.
#
# TODO: 2. Figure out how to bind ports here. We can use approach we used in DockerVM but in POds not all ports
# should be xposed
#
# TODO: 3. Porpagate environment variables via container.env: {}
#

Name: Service
Extends: std:Application

Properties:

  name:
    Contract: $.string().notNull()

  kubernetesPOD:
    Contract: $.class('io.murano.apps.docker.Kubernetes.POD')

  kubernetes:
    Contract: $.class('io.murano.apps.docker.Kubernetes').notNull()

  port:
    Contract: $.int()
    Default: 80

  containerPort:
    Contract: $.int()
    Default: 80

  externalLB:
    Contract: $.bool()
    Default: false

  selector:
    Contract: {}

  serviceDefinition:
    Contract: {}
    Usage: Out

  newPOD:
    Contract: $.bool()
    Usage: Out
    Default: true

  loadBalancer:
    Contract: $.class(traffic:LoadBalancer)

  enabled:
    Contract: $.bool()
    Default: false




Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - If: $.enabled
            Then:
              - $.environment.reporter.report($this, 'Waiting for a POD availability')
              - $resources: new(sys:Resources)
              - $.serviceDefinition: $resources.yaml('service.yaml').bind(dict(
                 id => $.name,
                 port => $.port,
                 container_port => $.containerPort,
                 selector_name => $.selector,
                 ext_balancer => $.externalLB
                 ))

              - $template: $resources.yaml('UpdatePOD.template').bind(dict(
                         podDefinition => $.serviceDefinition,
                         newPOD => $.newPOD,
                         debug => true
                         ))
              - $.kubernetes.kubeMaster.agent.call($template, $resources)
              - $.environment.reporter.report($this, 'Kubernetes Service has been configured')
              - If: $.loadBalancer != null
                Then:
                  - $.environment.reporter.report($this, 'Configuring LoadBalancer for the service')
                  - $.loadBalancer.createPool()
                  - For: instance
                    In: $.kubernetes.instances
                    Do:
                      - $.loadBalancer.addMember($instance)
          - $.setAttr(deployed, true)
