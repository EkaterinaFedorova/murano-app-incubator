Namespaces:
  =: io.murano.apps.test
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  apps: io.murano.apps
  net: io.murano.networking


Name: SimpleVM

Extends: std:Application

Properties:
  name:
    Contract: $.string().notNull()

  instances:
    Contract:
     - $.class(res:Instance).notNull()

  balancer_ip:
     Contract: $.string()
     Usage: Out

  initial_count:
      Contract: $.int().notNull()
      Usage: In

  current_count:
     Contract: $.int()
     Usage: InOut


Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  addVM:
    Body:
      - $.current_count: $.current_count + 1
      - $inst: $.instances[$.current_count]
      - $inst.deploy()


  deploy:
    Body:
#      - debugPrint('--> deploy()')
      - If: not $.getAttr(isDeployed, false)
        Then:
          - $resources: new(sys:Resources)

          - $this.find(std:Environment).reporter.report($this, '[VMCluster]Creating VM ')

          - $securityGroupIngress:
              - ToPort: 22
                FromPort: 22
                IpProtocol: tcp
                External: true
          - $.environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          - $.current_count: $.initial_count
          - $.instances.take($.initial_count).pselect($.deploy())

          - For: inst
            In: $.instances.take($.initial_count)
            Do:
              - $this.registerHeatAlarm(instanceName => $inst.name)

          - $this.find(std:Environment).reporter.report($this, '[VMCluster]VMs are created')

          - $net: $.environment.defaultNetworks.environment
          - $subnetRef: $net.name + '-subnet-' + $net.id()
          - $extNetId: $net.getExternalNetId()

          - $this.find(std:Environment).reporter.report($this, '[VMCluster]Creating LB Pool')
          - $template: $resources.yaml('lb-template.hot').bind(dict(
                pool_name     => 'testPool',
                subnet        => $subnetRef,
                lb_name       => 'testLB',
                public_net_id => $extNetId
              ))
          - $.environment.stack.updateTemplate($template)
          - $.environment.stack.push()
          - $outputs: $.environment.stack.output()
          - $.balancer_ip: $outputs.get('LB_VIP')
          - $this.find(std:Environment).reporter.report($this, $ipAddress)
          - $.setAttr(isDeployed, true)

  addToLB:
    Arguments:
      instance_name:
         Contract: $.string().notNull()
      port:
         Contract: $.int().notNull()

    Body:
      - $resources: new(sys:Resources)
      - $this.find(std:Environment).reporter.report($this, '[VMCluster]Creating LB Member')
      - $template: $resources.yaml('lb-member.hot').bind(dict(
           member => 'lb-mem'.join($instance_name),
           pool_name => 'testPool',
           instance => $instance_name,
           member_port => $port
          ))
      - $.environment.stack.updateTemplate($template)
      - $.environment.stack.push()

  registerHeatAlarm:
    Arguments:
      instanceName:
        Contract: $.string().notNull()

    Body:
#      - debugPrint('--> registerHeatAlarm({0})'.format($instance_name))
      - $res: new(sys:Resources)

      - $alarmAction: format('{0}/v1/environments/{1}/actions/{1}_scaleUP',
            config(murano, url),
            $.environment.id()
          )
      - $alarmName: format('cpu_alarm_high_{0}', $instanceName)

#      - debugPrint('alarm_action = {0}'.format($alarmAction))
#      - debugPrint('alarm resource name = {0}'.format($alarmName))

      - $template: $res.yaml('cpu-alarm-high.hot').bind(dict(
            instance_name => $instanceName,
            alarm_name    => $alarmName,
            alarm_action  => $alarmAction
          ))
#      - debugPrint('heat_alarm_template = {0}'.format($template))

      - $.environment.stack.updateTemplate($template)
      - $.environment.stack.push()
#      - debugPrint('<-- registerHeatAlarm()')

  scaleUP:
    Usage: Action
    Body:
     - $.addVM()
