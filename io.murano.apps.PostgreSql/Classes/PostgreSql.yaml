Namespaces:
  =: io.murano.apps.PostgreSql
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system


Name: PostgreSql

Extends: std:Application

Properties:
  name:
    Contract: $.string().notNull()

  instance:
    Contract: $.class(res:Instance).notNull()

Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: !yaql "not bool($.getAttr(deployed))"
        Then:
          - $.environment.reporter.report($this, 'Creating VM for PostgreSql')
          - $securityGroupIngress:
              - ToPort: 5432
                FromPort: 5432
                IpProtocol: tcp
                External: True
          - $.environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          - $.instance.deploy()
          - $resources: new(sys:Resources)
          # Deploy PostgreSql
          - $.environment.reporter.report($this, 'Instance is created. Deploying PostgreSql')
          - $template: $resources.yaml('DeployPostgreSql.template')
          - $.instance.agent.call($template, $resources)
          - $this.find(std:Environment).reporter.report($this, 'PostgreSql application is installed.')
          - $.setAttr(deployed, True)

  createDatabase:
    Arguments:
      - database:
          Contract: $.string().notNull()
      - username:
          Contract: $.string().notNull()
      - password:
          Contract: $.string().notNull()
    Body:
      - If: !yaql "not bool($.getAttr(deployed))"
        Then:
          - $.deploy()
      - $this.find(std:Environment).reporter.report($this, 'Configuring ' + $database + ' database.')
      # Configure Database on PostgreSQL
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('ConfigurePostgreSqlDatabase.template').bind(dict(
            database => $database,
            username => $username,
            password => $password
          ))
      - $.instance.agent.call($template, $resources)
      - $this.find(std:Environment).reporter.report($this, 'Database configured')

  restartService:
    Usage: Action
    Description: Restart PostgreSQL service
    Body:
       - $resources: new(sys:Resources)
       - $.environment.reporter.report($this, 'Restarting PostgreSql Service')
       - $template: $resources.yaml('RestartService.template')
       - $out: $.instance.agent.call($template, $resources)
       - $.environment.reporter.report($this, 'Status: {0}'.format($out))
